To Do List app using MERN stack

1. Create folder: Backend & Frontend
2. On root folder: run "npm init -y"
3. Add "type": "module" in package.json
4. Add "dev": "NODE_ENV=development nodemon backend/server.js" to run using "npm run dev"

Backend
1. Libraries for Backend: "npm install express mongoose dotenv nodemon -D"
2. Create server.js
MongoDB
1. Mongo Atlas -> Create Project => Get password and add to Connection string
2. Create .env file and paste Connection String
3. Mongo Atlas -> Network Access => Allow from Anywhere
Backend
1. Create "config" folder and file "db.js"
2. Create models folder that contains model for collection
3. Create "Post" method to add todo in database
4. Test the method in postman
5. Add different routing methods(Get, Post, Update, Delete) in our API
Make code readable
1. Add all routes to "routes" folder
2. Move all routing methods to todoitem.route.js
3. Use express Router and change "app.get()" to "router.get()" then export the route handler called router
4. On server file use router as middleware
Note: To further make readable, you can make controller that holds "async(req, res) => {}" and import it in HTTP routes

Frontend
1. Create React app with Vite: run "npm create vite@latest ."  . means create in this folder
2. Use React UI component library like chakraUI, Tailwind, MaterialUI
3. If the app uses navigation then run: "npm i react-router-dom"
4. Encapsulate App component in "<BrowserRouter>"
5. BrowserRouter renders Element in the Route specified inside <Routes> component

While creating React app you might use state to hold database
We use state management library like redux, zustand, React context
1. We use Zustand: Run "npm i zustand"
2. Create store folder and make TodoStore.js
3. Create state of variable, set method, and all other functionalities like add, delete, update and hit api
4. While using fetch to hit api, add a proxy (vite.config -> server:{proxy:{"/api":{target: "localhost Link"} } })

Currently, we have backend on port 8000 and frontend at port 5000
But we are gonna deploy our entire application under one domain


When you run "npm run build" it uses frontend=>package=>scripts=>"build": "vite build"
It creates dist folder which we use for react application, which is going to be our static asset file

1. Now delete node modules for github, to install modules we need to create script 
(package.json => scripts{build: "npm install && npm install --prefix frontend && npm run build --prefix frontend"})
It installs node modules for backend and inside frontend, it also builds the application later
2. Now when you "run npm run build" in terminal it runs the above command line code and we use this command in deployment
3. After build is complete we now start it.
(package.json => scripts{start: "NODE_ENV=production node backend/server.js"})


Some React notes
1. While using useState() set method

  setTodo((prev)=>{
    return {...prev, [name]: value}
  })

You can add new value to previous value and return it

2. 